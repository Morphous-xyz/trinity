import { Address, parseAbi, parseAbiItem, parseEther } from "viem";
import { publicClient, sendTestTransaction, testClient } from "./globals";

/// @notice Setting an ERC20 contract to a new bytecode, for allowing arbitrary actions. (new bytecode = ERC20 token with a `setBalance(address,uint)` function)
// Setting a user balance to a new value
export async function corruptToken({
    token,
    amount,
    recipient,
}: {
    token: Address;
    amount: bigint;
    recipient: Address;
}) {
    await testClient.setCode({
        address: token,
        bytecode: '0x608060405234801561001057600080fd5b50600436106100f55760003560e01c806370a0823111610097578063a9059cbb11610066578063a9059cbb146101eb578063d505accf146101fe578063dd62ed3e14610213578063e30443bc1461023c57600080fd5b806370a082311461018c5780637ecebe00146101b257806395d89b41146100fa578063a457c2d7146101d857600080fd5b806323b872dd116100d357806323b872dd1461014f578063313ce567146101625780633644e51514610171578063395093511461017957600080fd5b806306fdde03146100fa578063095ea7b31461011257806318160ddd14610135575b600080fd5b60606040516101099190610758565b60405180910390f35b6101256101203660046107c2565b61024f565b6040519015158152602001610109565b6805345cdf77eb68f44c545b604051908152602001610109565b61012561015d3660046107ec565b610291565b60405160128152602001610109565b61014161033d565b6101256101873660046107c2565b6103ad565b61014161019a366004610828565b6387a211a2600c908152600091909152602090205490565b6101416101c0366004610828565b6338377508600c908152600091909152602090205490565b6101256101e63660046107c2565b61040d565b6101256101f93660046107c2565b61046e565b61021161020c36600461084a565b6104d7565b005b6101416102213660046108bd565b602052637f5e9f20600c908152600091909152603490205490565b61021161024a3660046107c2565b6105f3565b600082602052637f5e9f20600c5233600052816034600c205581600052602c5160601c3360008051602061093283398151915260206000a35060015b92915050565b60008360601b33602052637f5e9f208117600c526034600c20805460001981146102d157808511156102cb576313be252b6000526004601cfd5b84810382555b50506387a211a28117600c526020600c208054808511156102fa5763f4d678b86000526004601cfd5b84810382555050836000526020600c208381540181555082602052600c5160601c8160601c600080516020610912833981519152602080a3505060019392505050565b6040516000606080516020918201207f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f845290830152507fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6604082015246606082015230608082015260a0902090565b600082602052637f5e9f20600c52336000526034600c208054838101818110156103df5763f90670666000526004601cfd5b80835580600052505050602c5160601c3360008051602061093283398151915260206000a350600192915050565b600082602052637f5e9f20600c52336000526034600c2080548381101561043c57638301ab386000526004601cfd5b8381039050808255806000525050602c5160601c3360008051602061093283398151915260206000a350600192915050565b60006387a211a2600c52336000526020600c208054808411156104995763f4d678b86000526004601cfd5b83810382555050826000526020600c208281540181555081602052600c5160601c33600080516020610912833981519152602080a350600192915050565b60006104e161033d565b9050604051854211156104fc57631a15a3cc6000526004601cfd5b8860601b60601c98508760601b60601c97506338377508600c52886000526020600c2080546001810182557f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c983528a602084015289604084015288606084015280608084015250508560a08201526119016000528160205260c081206040526042601e206000528460ff1660205283604052826060526020806080600060015afa50883d51146105b45763ddafbaef6000526004601cfd5b6303faf4f960a51b88176040526034602c208790558789600080516020610932833981519152602060608501a360405250506000606052505050505050565b6387a211a2600c9081526000839052602090205481111561063b576387a211a2600c9081526000839052602090205461063790839061063290846108f0565b610686565b5050565b6387a211a2600c90815260008390526020902054811015610637576106378282610677856387a211a2600c908152600091909152602090205490565b61068191906108f0565b6106f3565b6805345cdf77eb68f44c54818101818110156106aa5763e5cfe9576000526004601cfd5b806805345cdf77eb68f44c5550506387a211a2600c52816000526020600c208181540181555080602052600c5160601c6000600080516020610912833981519152602080a35050565b6387a211a2600c52816000526020600c2080548083111561071c5763f4d678b86000526004601cfd5b82900390556805345cdf77eb68f44c8054829003905560008181526001600160a01b038316600080516020610912833981519152602083a35050565b600060208083528351808285015260005b8181101561078557858101830151858201604001528201610769565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b03811681146107bd57600080fd5b919050565b600080604083850312156107d557600080fd5b6107de836107a6565b946020939093013593505050565b60008060006060848603121561080157600080fd5b61080a846107a6565b9250610818602085016107a6565b9150604084013590509250925092565b60006020828403121561083a57600080fd5b610843826107a6565b9392505050565b600080600080600080600060e0888a03121561086557600080fd5b61086e886107a6565b965061087c602089016107a6565b95506040880135945060608801359350608088013560ff811681146108a057600080fd5b9699959850939692959460a0840135945060c09093013592915050565b600080604083850312156108d057600080fd5b6108d9836107a6565b91506108e7602084016107a6565b90509250929050565b8181038181111561028b57634e487b7160e01b600052601160045260246000fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925a264697066735822122097233d7fd8739060111a5ba154742b8a49caba84703da5ee1bf6d302c2d00a0d64736f6c63430008110033'
    })

    // Sender of tx should have ETH
    await testClient.setBalance({
        address: recipient,
        value: parseEther('1')
    })

    // Should be able to do arbitrary actions now
    return await sendTestTransaction({
        address: token,
        abi: parseAbi(["function setBalance(address,uint) public"]),
        functionName: "setBalance",
        account: recipient,
        args: [recipient, amount],
    });
}

export async function transferToken({
    token,
    amount,
    recipient,
    account,
}: {
    token: Address;
    amount: bigint;
    recipient: Address;
    account: Address;
}) {
    return await sendTestTransaction({
        address: token,
        abi: parseAbi(["function transfer(address _to, uint256 _value) public returns (bool success)"]),
        functionName: "transfer",
        account,
        args: [recipient, amount],
    });
}

export function getBalanceOf({
    token,
    account,
}: {
    token: Address;
    account: Address;
}) {
    const abi = parseAbiItem("function balanceOf(address account) view returns (uint256)");

    return publicClient.readContract({
        address: token,
        abi: [abi],
        functionName: "balanceOf",
        args: [account],
    });
}  